openapi: 3.0.3
info:
  version: '3.0'
  title: Common APIs
  contact:
    name: Integrations
    email: support@fylehq.com
servers:
  - url: 'https://accounts.fylehq.com'
    description: Live Server
components:
  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: 'https://accounts.fylehq.com/app/developers/#/oauth/authorize'
          tokenUrl: 'https://accounts.fylehq.com/oauth/token'
          scopes:
            common.*: Grant all COMMON actions
  parameters:
    q:
      in: query
      name: q
      required: true
      description: >
        The query string on which to search. The service will return candidate
        matches based on this string and order results based on their perceived
        relevance.<br>

        q=bangalore
      schema:
        type: string
        example: bangalore
    types:
      in: query
      name: types
      required: true
      description: >
        The types of place results to return.<br>

        Note the `()` which represents the collection of multiple types.<br>

        For more information click <a
        href='https://developers.google.com/places/web-service/supported_types#table3'>here</a>.<br>

        types=(cities)
      schema:
        type: string
        example: (cities)
        enum:
          - (cities)
          - (regions)
          - geocode
          - address
          - establishment
    cordinates:
      in: query
      name: location
      description: >
        This param specifies the point around which you wish to retrieve place
        information.<br>

        location=latitude,longitude
      schema:
        type: string
        example: '26.595889,85.4891037'
  schemas:
    '401':
      type: object
      properties:
        message:
          enum:
            - invalid token
          type: string
          description: >
            This error means that the input access token is either not issued by
            Fyle or has expired.

            You need to generate a new access token.
    '403':
      type: object
      properties:
        message:
          enum:
            - Forbidden
          type: string
          description: >
            This error means current user does not have enough permissions to
            perform this operation.
    count:
      description: |
        The total number of objects that can be requested.
      type: integer
      example: 10000
    places:
      type: array
      items:
        type: object
        properties:
          id:
            type: string
            maxLength: 255
            description: >-
              It containes a textual identifier that uniquely identifies a
              place.
            example: ChIJify3BTzI5zsR2q86fwXrh74
          formatted_address:
            type: string
            maxLength: 255
            description: |
              Contains the human-readable name for the returned result.
            readOnly: true
            example: 'Andheri, Maharashtra, India'
    get_places:
      type: object
      properties:
        count:
          $ref: '#/components/schemas/count'
        url:
          type: string
          example: /common/places
        data:
          $ref: '#/components/schemas/places'
        status:
          type: string
          description: >
            Contains the status of the request, and may contain debugging
            information to help you track down why the request failed.
          enum:
            - OK
            - ZERO_RESULTS
            - OVER_QUERY_LIMIT
            - REQUEST_DENIED
            - INVALID_REQUEST
            - UNKNOWN_ERROR
    'places@{id}':
      type: object
      properties:
        id:
          type: string
          maxLength: 255
          description: It containes a textual identifier that uniquely identifies a place.
          example: ChIJify3BTzI5zsR2q86fwXrh74
        city:
          type: string
          example: London
        state:
          type: string
          example: London
        country:
          type: string
          example: United Kingdom
        formatted_address:
          type: string
          example: '221 Baker St, Marylebone, London, United Kingdom'
        latitude:
          type: number
          example: 12.971599
        longitude:
          type: number
          example: 77.594566
    'get_places@{id}':
      type: object
      properties:
        url:
          type: string
          example: /common/places
        data:
          $ref: '#/components/schemas/places@{id}'
    expense_extract:
      type: object
      properties:
        data:
          type: object
          properties:
            client:
              type: string
              maxLength: 255
              description: |
                Takes the platform name from where this API is requested.
              example: WEBAPP
            files:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                    maxLength: 255
                    description: |
                      Takes the name of the file which contains the receipt.
                  content:
                    type: string
                    description: >
                      This field takes the base64 encoded representation of the
                      file.
                    example: JVBERi0xLjQKMSAwIG9iago8PAovVGl0bGUgKP7/KQovQ3JlYX...
            meta:
              type: object
              description: |
                Additional optional data.
              properties:
                email:
                  type: string
                spent_at:
                  type: string
      required:
        - data
    created_at:
      type: string
      format: date-time
      description: >
        <a href='https://tools.ietf.org/html/rfc3339#section-5.6'>RFC 3339,
        section 5.6 compliant timestamp.</a>

        Signifies when this object was created.
      readOnly: true
      example: '2020-06-01T13:14:54.804Z'
    objects_expense_extract:
      type: object
      properties:
        callback_url:
          type: string
          description: |
            Contains the callback url for auditing.
          example: 'https://platform.fylehq.com/v1/vision_audit/aud8Ydg78GOh'
        amount:
          type: number
          description: |
            Extracted expense amount from receipt.
          example: 1500
        category_name:
          type: string
          maxLength: 25
          description: |
            Extracted category of expense from receipt.
          example: Flight
        currency:
          type: string
          maxLength: 3
          example: USD
          description: >
            Extracted currency from the given receipt. <br>

            ISO 4217 currency codes that are usually of three upper case
            letters.

            See "https://www.iban.com/currency-codes" for examples.
        date:
          $ref: '#/components/schemas/created_at'
        invoice_dt:
          type: string
          format: date-time
          description: >
            RFC 3339, section 5.6
            "https://tools.ietf.org/html/rfc3339#section-5.6" compliant 

            Extracted timestamp on which the Expense was made.
        vendor_name:
          type: string
          example: Uber
          maxLength: 255
          description: >
            Extracted string denoting the name of the vendor to which the
            expense was made
        source:
          type: string
          example: ROBOT
          description: |
            The name of the client which is extracting the data.
    post_expense_extract:
      type: object
      properties:
        url:
          type: string
          example: /common/expense_extract
        data:
          $ref: '#/components/schemas/objects_expense_extract'
    bulk_error:
      type: object
      properties:
        row:
          type: integer
          description: |
            This holds the info of which row contains bad data.
        key:
          type: string
          description: |
            This helps in identifying the error by unique key.
        message:
          type: string
          description: |
            This explains what the error is in `human readable` text.
    json_parsing_error:
      type: object
      properties:
        message:
          enum:
            - Unable to process JSON
          type: string
          description: |
            This error means that incoming json is not in right format.
        code:
          type: integer
          default: 400
          example: 400
          deprecated: true
tags:
  - name: Places
    description: |
      These APIs gives the places suggestions and geographic data of a place.
  - name: Data Extraction
    description: |
      These APIs gives the expense relevant data from the reciepts
paths:
  /common/places:
    get:
      tags:
        - Places
      summary: List places
      description: |
        Lists all the place suggestions based on given query.
      operationId: GetPlaces
      parameters:
        - $ref: '#/components/parameters/q'
        - $ref: '#/components/parameters/types'
        - $ref: '#/components/parameters/cordinates'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_places'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
  '/common/places/{id}':
    get:
      tags:
        - Places
      summary: Retrieve place details
      description: |
        Gives the exact geographic data for the given place id.
      operationId: GetPlaceDetails
      parameters:
        - in: path
          name: id
          required: true
          description: >
            It contains a textual identifier that uniquely identifies a
            place.<br>

            id=ChIJify3BTzI5zsR2q86fwXrh74
          schema:
            type: string
            example: ChIJify3BTzI5zsR2q86fwXrh74
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_places@{id}'
  /common/expense_extract:
    post:
      tags:
        - Data Extraction
      summary: Retrieve expense data from receipt
      description: |
        Retrieve expense related data from the given receipt.
      operationId: PostVisionExtract
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/expense_extract'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    example: /common/expense_extract
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/post_expense_extract'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                oneOf:
                  - type: array
                    items:
                      $ref: '#/components/schemas/bulk_error'
                    example:
                      - row: 1
                        key: Cost center abcd
                        message: Invalid or duplicate cost center code
                  - $ref: '#/components/schemas/json_parsing_error'
        '401':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
